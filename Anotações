cd dashboard

# git é um serviço a apartado de versionamento, 
# git init cria um repositório local (.git)
# sempre fazer ao criar um projeto
git init

developer@developer:~/python-521/dashboard/.git$ ls -l
total 32
drwxr-xr-x 2 developer developer 4096 mai 29 18:58 branches
-rw-r--r-- 1 developer developer   92 mai 29 18:58 config
-rw-r--r-- 1 developer developer   73 mai 29 18:58 description
-rw-r--r-- 1 developer developer   23 mai 29 18:58 HEAD
drwxr-xr-x 2 developer developer 4096 mai 29 18:58 hooks
drwxr-xr-x 2 developer developer 4096 mai 29 18:58 info
drwxr-xr-x 4 developer developer 4096 mai 29 18:58 objects
drwxr-xr-x 4 developer developer 4096 mai 29 18:58 refs

# lista de arquivos e pastas a serem ignoradas 
# e não serem sincronizadas para o repositório
> .gitignore

# OBS.: mínimo para usar o GIT: .git e .gitignore

# README.md utiliza a linguagem Markdown
# https://dillinger.io/ é um editor online de markdown

git remote add origin https://github.com/danielalvesleandro/dashboard.git
git commit -m 'primeiro commit'
# criar snaphot
git add .
git commit -am 'primeiro commit'
git push origin master

mkdir templates #scripts html
mkdir blueprints #scripts python
mkdir static #scripts css / não usado nesse projeto

cd templates/
> index.html
> sign-in.html
> docker.html
> jenkins.html
> gitlab.html

cd ../blueprints

> docker.py
> jenkins.py
> gitlab.py
> ldap.py
> __init__.py  # indica que o diretório é um módulo do python)

python3 -m virtualenv --python=$(which python3) env

source env/bin/activate

pip install flask

pip freeze > requirements.txt # imprime todas dependências do projeto, facilitando a instalação num novo projeto

# Montando o dashboard

- montar o cabeçalho do index.html
- montar o cabeçalho do docker.html

# blueprint módulo do flask / projeto independente com rotas prontas para serem reutilizadas, etc..

#  ctrl+A ctrl+K ctrl+F reestruturar código html / identações

#######################################
# AULA 04
#######################################

DOCKER:

# repositório de imagens
https://hub.docker.com

DockerFile: define os passos para vc ter a máquina como uma vm, uma espécie de um templates, define os serviços

O container não possui kernel, a ideia é rodar a aplicação sem o peso do kernel, isso fica somente no host

Container é volátil, ele nasceu pra morrer

+ Agilidade, Segurança, Portabilidade, Redução de custo
- Curva de aprendizagem

Aplicação roda totalmente isolada do OS (somente bins/libs)


curl -fsSL https://get.docker.com -o get-docker.sh

sudo sh get-docker.sh

sudo usermod -aG docker developer

logout/login

# lista containers ativos
docker ps

# lista todos containers (ativos e inativos)
docker ps -a

# sobe o container básico do hello-world
docker run hello-world

CONTAINER ID        IMAGE               COMMAND             CREATED              STATUS                          PORTS               NAMES
98f0698c9500        hello-world         "/hello"            About a minute ago   Exited (0) About a minute ago                       reverent_mirzakhani

ID: único identificador (espaço na memória)
IMAGE: template
COMMAND: comando a ser executado ao fim do provisionamento
CREATED: tempo de provisionamento
STATUS: estado atual do container

# subir um container do mongodb redirecionando a porta 27017 do container para a 27017 do host
docker run -it -p 27017:27017 mongo

# dit não prende a console (background)
docker run -dit -p 27017:27017 mongo

# sobe no modo persistente (somente o /data/db) / guarda em /var/lib/docker/volumes/data
docker run -dit -p 27017:27017 -v data:/data/db mongo

# sobe no modo persistente
docker run -dit -p 27017:27017 -v /folder:/data/db mongo

# lista volumes do docker
docker volume ls

# para o container pelo ID e pelo nome (aleatório)
docker stop bac6be60dd00
docker stop modest_stallman

# acessar a console do container
docker exec -it 371e9bfc3948 bash

# Criar imagem Python
- criar arquivo chamado Dockerfile com o seguinte conteúdo:

#########################################################################################
# imagem base
FROM python:3.6.7

# cria o diretório /app e faz cd para dentro dele
WORKDIR /app

# copia o conteúdo do diretório /app para dentro do diretório /app no container
ADD . /app

# instala as dependências do projeto
RUN pip install -r requirements.txt

# roda a aplicação app
CMD [ "python", "app.py"]
#########################################################################################

# constrói o container chamado flask-app a partir da imagem flask-app
docker build -t flask-app .

# executa o container com o flask na porta 80
docker run -dit -p 80:5000 flask-app

# lista as imagens no repositório local
docker image ls

# remove o container especificando pelo id
docker rm 371e9bfc3948

# remove a imagem especificando pelo id
docker rmi 371e9bfc3948

# remove todos containers parados
docker system prune


source env/bin/activate
pip install docker
pip freeze > requirements.txt

developer@developer:~/python-521/dashboard$ git add .
developer@developer:~/python-521/dashboard$ git commit -m 'Aula 5'
On branch master
nothing to commit, working tree clean
developer@developer:~/python-521/dashboard$ git push origin master


AULA 5

# configurar o docker para aceitar requisições externas (em relação ao host)

sudo cp /lib/systemd/system/docker.service /etc/systemd/system/

Editar o arquivo copiar e adicionar "-H tcp://0.0.0.0:2376" no final da linha ExecStart

sudo systemctl daemon-reload
sudo systemctl restart docker
netstat -an | grep 2376


Docker Compose

- formato yaml
- especifica diversas imagens para vc rodar (sobe diversos containers de uma vez)


JENKINS

pip install python-jenkins
pip freeze > requirements.txt


AULA 6

GIT

- versionador de códigos
- possibilidade de gerar snapshots da versão / restaurar quando necessário
- muito pesado
- github/gitbucket é um repositório remoto centralizado na internet para as pessoas trabalharem em conjunto
- gitlab solução opensource para utilização em instuições de forma privada (instalado na própria infra)
- gogs poderá substituir o gitlab em popularidade nos próximos anos / mais leve

GIT LAB

docker run -dit -p 443:443 -p 8000:80 gitlab/gitlab-ce
docker logs -f b8c9506e4da2

migrations: criam e populam estruturas de dados / versionamento dos dados existentes no banco postgres existente dentro do gitlab / parecido com o dump
executa ao iniciar o container com o gitlab, se não especificar os volumes no SO ao parar e subir o container vai rodar novamente

definir uma nova senha
registrar um usuário em seguida cairá nesta página:
http://localhost:8000/dashboard/projects

Criar projeto chamado "python-521"

git remote add gitlab http://localhost:8000/daniel.leandro/python-521.git
git remote set-url gitlab http://localhost:8000/daniel.leandro/python-521.git (alterar/corrigir a url)
git remote show
git remote show gitlab
git log (mostra histórico de commits)
git push gitlab master

branch usado para controlar funcionalidades (uma branch para cada desenv, faz o merge das branches para a master)
log usado para controlar 

Criar conta no gitlab.com

git remote set-url gitlab https://gitlab.com/daniel.leandro/python-521.git
criar personal acces token (settings / sexta opção)

- Adicionar hash no código gitlab.py

AULA 08

OpenLDAP

- ferramenta ldap opensource
- schemas contém uma lista de classe de objetos

- criar o arquivo docker-compose.yml com o conteúdo abaixo:

#######################################################
# docker-compose.yml
version: '3'
services:
              
    openldap:
        image: osixia/openldap:latest
        environment:
            LDAP_DOMAIN: "dexter.com.br"
            LDAP_ADMIN_PASSWORD: "4linux"
        ports:
            - "636:636"
            - "389:389"
#######################################################

docker-compose up

pip install ldap3

python
>>> import ldap3
>>> USERNAME = 'admin'
>>> PASSWORD = '4linux'
>>> server = ldap3.Server('ldap://127.0.0.1:389')
>>> connection = ldap3.Connection(server, 'cn={},dc=dexter,dc=com,dc=br'.format(USERNAME),PASSWORD)
>>> connection.bind()
>>> print(connection)

>>> user = {
... 'cn': 'Daniel',
... 'sn': 'Leandro',
... 'mail': 'daniel.leandro@outlook.com.br',
... 'uidNumber': '123',
... 'gidNumber': '123',
... 'uid': 'daniel',
... 'homeDirectory': '/home/daniel',
... 'userPassword': '4linux'

>>> objectClass = [ 'top', 'person', 'organizationalPerson', 'inetOrgPerson', 'posixAccount' ]
>>> cn = 'uid={},dc=dexter,dc=com,dc=br'.format(user['mail'])
>>> res = connection.add(cn, objectClass, user)

>>> email = 'daniel.leandro@outlook.com.br'
>>> dn = 'uid={},dc=dexter,dc=com,dc=br'.format(email)
>>> connection.search(
... dn,
... '(objectClass=person)',
... attributes=['sn', 'userPassword']
... )

>>> connection.entries
[DN: uid=daniel.leandro@outlook.com.br,dc=dexter,dc=com,dc=br - STATUS: Read - READ TIME: 2019-06-05T20:54:22.750060
    sn: Leandro
    userPassword: b'4linux'

# o 'b' indica que é formato byte (melhor tráfego pela rede)

>>> import hashlib
>>> nome = 'Daniel Alves Leandro'
>>> hash = hashlib.md5(nome.encode()).digest()
>>> hash
b"'\x88\xc2\xee\xd69\xbf\x85\x8e\xf5~u\x15\xefO\x1e"


AWS (provisionar aplicação na cloud)

ssh -i python-521.pem ubuntu@18.231.109.74

instalar docker
instalar jenkins
instalar python

na máquina local:

pip install paramiko
criar script provision.py

python provision.py
